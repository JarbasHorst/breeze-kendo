{"version":3,"sources":["breeze-kendo.js"],"names":["$","kendo","breeze","BreezeTransport","options","kendoModelType","manager","Error","query","this","useBreezeMapping","scheduler","breezeEntityMapping","Object","create","makeOperator","op","eq","Operators","Equals","neq","NotEquals","lt","LessThan","lte","LessThanOrEqual","gt","GreaterThan","gte","GreaterThanOrEqual","startswith","StartsWith","endswith","EndsWith","contains","Contains","makeFilters","args","filters","map","f","field","operator","value","Predicate","logic","and","or","recursiveIteration","object","callback","prefix","property","hasOwnProperty","mutex","locked","apply","arguments","syncItems","observable","entity","protect","bind","change","e","console","error","entityAspect","propertyChanged","subscribe","propertyName","set","newValue","_backingStore","obj","prop","id","__breezeEntity","exports","data","FilterQueryOp","extend","prototype","read","schedulerWidget","schedulerView","startDate","endDate","_this","filter","where","getKendoScheduler","view","sort","length","orderBy","col","dir","join","page","skip","take","inlineCount","executeQuery","success","_makeResults","err","ex","handleError","_handleError","_saveChanges","then","saveResult","httpResponse","update","destroy","statusText","innerError","timer","deferred","Q","defer","clearTimeout","setTimeout","saveChanges","resolve","reject","promise","_cancelChanges","dataItem","breezeEntity","entityManager","rejectChanges","meta","typeName","typeObj","schema","props","a","metadataStore","getEntityTypeNameForResourceName","resourceName","getEntityType","results","total","_makeSchema","dataProperties","rec","schemaModel","forEach","name","model","define","ObservableArray","ev","action","items","item","setDeleted","createEntity","addEntity","proptype","fields","keyProperties","dataType","isNumeric","isDate","type","defaultValue","nullable","isNullable","required","Source","DataSource","init","transport","Model","batch","call","cancelChanges","_cancelModel","_destroyed","_detachObservableParents","_data","_observe","_pristineData","serverPaging","_total","_pristineTotal","_change","SchedulerSource","SchedulerDataSource","SchedulerEvent","_createNewModel","newModel","title","recurrenceId","recurs","isAllDay","jQuery"],"mappings":"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","file":"breeze-kendo.min.js","sourcesContent":["/* global breeze, kendo */\r\n\r\n/**\r\n * This is a forked version of the breeze-kendo bridge (https://github.com/kendo-labs/breeze-kendo).\r\n * You can get the latest version at https://github.com/iozag/breeze-kendo.\r\n *\r\n * Version 0.1.2\r\n *\r\n * Released under Apache 2.0 licence (http://kendoui-labs.telerik.com/#license)\r\n *\r\n */\r\n\r\n(function ($, kendo, breeze) {\r\n    'use strict';\r\n\r\n    var exports = kendo.data.breeze = {},\r\n        Predicate = breeze.Predicate,\r\n        Operators = breeze.FilterQueryOp;\r\n\r\n    /**\r\n     * Creates a new instance of a BreezeTransport object.\r\n     * @param {object} options - Options object of a Kendo data source.\r\n     * @param {object} kendoModelType - Type of the Kendo model in the data source. Should be kendo.data.Model or a class inherited from kendo.data.Model.\r\n     */\r\n    function BreezeTransport(options, kendoModelType) {\r\n        if (!options.manager) {\r\n            throw new Error('Please specify a Breeze EntityManager via `manager` option');\r\n        }\r\n\r\n        if (!options.query) {\r\n            throw new Error('Please specify a Breeze EntityQuery via `query` option');\r\n        }\r\n\r\n        this.manager = options.manager;\r\n        this.query = options.query;\r\n        this.useBreezeMapping = options.useBreezeMapping;\r\n        this.scheduler = options.scheduler;\r\n        this.kendoModelType = kendoModelType;\r\n\r\n        if (this.useBreezeMapping) {\r\n            // Object containing the Breeze Entity object for each item in the data source.\r\n            this.breezeEntityMapping = Object.create(null);\r\n        }\r\n    }\r\n\r\n    function makeOperator(op) {\r\n        return {\r\n            eq: Operators.Equals,\r\n            neq: Operators.NotEquals,\r\n            lt: Operators.LessThan,\r\n            lte: Operators.LessThanOrEqual,\r\n            gt: Operators.GreaterThan,\r\n            gte: Operators.GreaterThanOrEqual,\r\n            startswith: Operators.StartsWith,\r\n            endswith: Operators.EndsWith,\r\n            contains: Operators.Contains\r\n        }[op];\r\n    }\r\n\r\n    function makeFilters(args) {\r\n        var filters = args.filters.map(function (f) {\r\n            var field = 'tolower(' + f.field + ')',\r\n                operator = makeOperator(f.operator),\r\n                value = f.value;\r\n            return Predicate.create(field, operator, value);\r\n        });\r\n\r\n        if (args.logic === 'and') {\r\n            return Predicate.and(filters);\r\n        }\r\n\r\n        if (args.logic === 'or') {\r\n            return Predicate.or(filters);\r\n        }\r\n\r\n        throw new Error('Unsupported predicate logic ' + args.logic);\r\n    }\r\n\r\n    function recursiveIteration(object, callback, prefix) {\r\n        var property;\r\n\r\n        for (property in object) {\r\n            if (object.hasOwnProperty(property)) {\r\n                if (typeof object[property] === 'object') {\r\n                    recursiveIteration(object[property], callback, (prefix || '') + property + '.');\r\n                } else {\r\n                    callback(object, (prefix || '') + property);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function mutex() {\r\n        var locked = false;\r\n        return function (f) {\r\n            return function () {\r\n                if (!locked) {\r\n                    locked = true;\r\n                    try {\r\n                        f.apply(this, arguments);\r\n                    } finally {\r\n                        locked = false;\r\n                    }\r\n                }\r\n            };\r\n        };\r\n    }\r\n\r\n    function syncItems(observable, entity, useBreezeMapping, breezeEntityMapping) {\r\n        var protect = mutex();\r\n\r\n        observable.bind({\r\n            change: protect(function (e) {\r\n                if (e.field) {\r\n                    entity[e.field] = observable[e.field];\r\n                } else {\r\n                    console && console.error && console.error('Unhandled ObservableObject->Breeze change event', e);\r\n                }\r\n            })\r\n        });\r\n        entity.entityAspect.propertyChanged.subscribe(protect(function (e) {\r\n            if (e.propertyName) {\r\n                observable.set(e.propertyName, e.newValue);\r\n            } else if (e.entity) {\r\n                recursiveIteration(\r\n                    e.entity._backingStore,\r\n                    function (obj, prop) {\r\n                        observable.set(prop, obj[prop]);\r\n                    }\r\n                );\r\n            }\r\n        }));\r\n\r\n        if (useBreezeMapping) {\r\n            // Add original entity to the mapping list.\r\n            breezeEntityMapping[observable.id] = entity;\r\n        } else {\r\n            // Add original entity to the __breezeEntity property.\r\n            observable.__breezeEntity = entity;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transport which uses Breeze for accessing data.\r\n     */\r\n    $.extend(\r\n        BreezeTransport.prototype,\r\n        {\r\n            // The configuration used when the data source loads data items from a remote service\r\n            read: function (options) {\r\n                var _this = this,\r\n                    query = _this.query,\r\n                    args = options.data,\r\n                    schedulerWidget,\r\n                    schedulerView,\r\n                    startDate,\r\n                    endDate;\r\n\r\n                if (args.filter) {\r\n                    query = query.where(makeFilters(args.filter));\r\n                }\r\n\r\n                // If data source of a scheduler widget, filter by visible date range of current view.\r\n                if (_this.scheduler) {\r\n                    schedulerWidget = _this.scheduler.getKendoScheduler();\r\n\r\n                    // Make sure scheduler widget is already created.\r\n                    if (schedulerWidget) {\r\n                        schedulerView = schedulerWidget.view();\r\n                        startDate = schedulerView.startDate();\r\n                        endDate = schedulerView.endDate();\r\n                        query = query.where(\r\n                            Predicate.or([\r\n                                // Include all recuring events, since they might contain appointments\r\n                                // inside the current date range.\r\n                                Predicate.create(\r\n                                    'recurs',\r\n                                    Operators.Equals,\r\n                                    true\r\n                                ),\r\n                                // Limit single events to the date range of the current scheduler view.\r\n                                Predicate.create(\r\n                                    'end',\r\n                                    Operators.GreaterThanOrEqual,\r\n                                    startDate\r\n                                ),\r\n                                Predicate.create(\r\n                                    'start',\r\n                                    Operators.LessThanOrEqual,\r\n                                    endDate\r\n                                )\r\n                            ])\r\n                        );\r\n                    }\r\n                }\r\n\r\n                if (args.sort && args.sort.length > 0) {\r\n                    query = query.orderBy(args.sort.map(function (col) {\r\n                        return col.field + (col.dir === 'desc' ? ' desc' : '');\r\n                    }).join(', '));\r\n                }\r\n\r\n                if (args.page) {\r\n                    query = query\r\n                        .skip(args.skip)\r\n                        .take(args.take)\r\n                        .inlineCount();\r\n                }\r\n\r\n                try {\r\n                    _this.manager.executeQuery(query,\r\n                         function (data) {\r\n                             options.success(_this._makeResults(data));\r\n                        },\r\n                        function (err) {\r\n                            options.error(err);\r\n                        }\r\n                    );\r\n                } catch (ex) {\r\n                    console.error(ex);\r\n                }\r\n            },\r\n\r\n            // The configuration used when the data source saves newly created data items.\r\n            create: function (options) {\r\n                var handleError = this._handleError;\r\n\r\n                this._saveChanges().then(\r\n                        function (saveResult) {\r\n                            options.success(saveResult.httpResponse);\r\n                        }\r\n                    ).catch(\r\n                        function (error) {\r\n                            handleError(options, error);\r\n                        }\r\n                    );\r\n            },\r\n\r\n            // The configuration used when the data source saves updated data items.\r\n            update: function (options) {\r\n                var handleError = this._handleError;\r\n\r\n                this._saveChanges().then(\r\n                        function (saveResult) {\r\n                            options.success(saveResult.httpResponse);\r\n                        }\r\n                    ).catch(\r\n                        function (error) {\r\n                            handleError(options, error);\r\n                        }\r\n                    );\r\n            },\r\n\r\n            // The configuration used when the data source destroys data items.\r\n            destroy: function (options) {\r\n                var handleError = this._handleError;\r\n\r\n                this._saveChanges().then(\r\n                        function (saveResult) {\r\n                            options.success(saveResult.httpResponse);\r\n                        }\r\n                    ).catch(\r\n                        function (error) {\r\n                            handleError(options, error);\r\n                        }\r\n                    );\r\n            },\r\n\r\n            /**\r\n             * Returns an error to the data source.\r\n             * @param {object} options - Options object on which the error should be set.\r\n             * @param {object} error - Error object.\r\n             */\r\n            _handleError: function(options, error) {\r\n                options.error(\r\n                    error.httpResponse,\r\n                    error.statusText || (error.innerError && error.innerError.statusText));\r\n            },\r\n\r\n            /**\r\n             * Save the changes.\r\n             * @returns {promise} Promise of the save operation.\r\n             */\r\n            _saveChanges: (function () {\r\n                // Throttle, since we will get multiple calls even in \"batch\" mode.\r\n                var timer = null;\r\n                return function () {\r\n                    var _this = this,\r\n                        deferred = breeze.Q.defer();\r\n\r\n                    clearTimeout(timer);\r\n                    setTimeout(function () {\r\n                        _this.manager.saveChanges().then(\r\n                            function (saveResult) {\r\n                                deferred.resolve(saveResult);\r\n                            }\r\n                        ).catch(\r\n                            function (error) {\r\n                                deferred.reject(error);\r\n                            }\r\n                        );\r\n                    }, 10);\r\n                    return deferred.promise;\r\n                };\r\n            })(),\r\n\r\n            /**\r\n             * Cancel the changes.\r\n             * @param {object} dataItem - Model to cancel.\r\n             */\r\n            _cancelChanges: function (dataItem) {\r\n                var manager = this.manager,\r\n                    useBreezeMapping = this.useBreezeMapping,\r\n                    breezeEntityMapping = this.breezeEntityMapping,\r\n                    breezeEntity;\r\n\r\n                if (dataItem) {\r\n                    if (useBreezeMapping) {\r\n                        // Read Breeze entity for data item from mapping list.\r\n                        breezeEntity = breezeEntityMapping[dataItem.id];\r\n                    } else {\r\n                        // Read Breeze entity from data item.\r\n                        breezeEntity = dataItem.__breezeEntity;\r\n                    }\r\n\r\n                    if (breezeEntity && breezeEntity.entityManager) {\r\n                        breezeEntity.entityAspect.rejectChanges();\r\n                    } else {\r\n                        manager.rejectChanges();\r\n                    }\r\n                } else {\r\n                    manager.rejectChanges();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Transforms the result of a Breeze query into an array usable by Kendo.\r\n             * @returns {kendo.data.ObservableArray} Array containing the data.\r\n             */\r\n            _makeResults: function (data) {\r\n                var manager = this.manager,\r\n                    query = this.query,\r\n                    kendoModelType = this.kendoModelType,\r\n                    useBreezeMapping = this.useBreezeMapping,\r\n                    breezeEntityMapping = this.breezeEntityMapping,\r\n                    meta,\r\n                    typeName,\r\n                    typeObj,\r\n                    schema,\r\n                    props,\r\n                    a;\r\n\r\n                try {\r\n                    meta = manager.metadataStore;\r\n                    typeName = meta.getEntityTypeNameForResourceName(query.resourceName);\r\n                    typeObj = meta.getEntityType(typeName || query.resourceName);\r\n                } catch (ex) {\r\n                    // Without metadata Breeze returns plain JS objects so we can just return\r\n                    // the original array.\r\n                    data.results.total = data.inlineCount;\r\n                    return data.results;\r\n                }\r\n\r\n                // Let's get (or try to get) the schema and create a correct model, so that things like\r\n                // isNew() work\r\n                schema = this._makeSchema();\r\n\r\n                // With the metadata, some complex objects are returned on which we can't call\r\n                // ObservableArray/Object (would overrun the stack).\r\n\r\n                props = typeObj.dataProperties;\r\n                a = data.results.map(function (rec) {\r\n                    var obj = {},\r\n                        schemaModel;\r\n\r\n                    props.forEach(function (prop) {\r\n                        obj[prop.name] = rec[prop.name];\r\n                    });\r\n\r\n                    // bind to the schema if available\r\n                    if (schema && schema.model) {\r\n                        schemaModel = kendoModelType.define(schema.model);\r\n                        obj = new schemaModel(obj);\r\n                    } else {\r\n                        obj = new kendoModelType(obj);\r\n                    }\r\n\r\n                    syncItems(obj, rec, useBreezeMapping, breezeEntityMapping);\r\n                    return obj;\r\n                });\r\n\r\n                a = new kendo.data.ObservableArray(a);\r\n                a.bind('change', function (ev) {\r\n                    switch (ev.action) {\r\n                        case 'remove':\r\n                            ev.items.forEach(function (item) {\r\n                                // Mark the Breeze entity of the current data source item as deleted.\r\n                                if (useBreezeMapping) {\r\n                                    breezeEntityMapping[item.id].entityAspect.setDeleted();\r\n                                }\r\n                                else {\r\n                                    item.__breezeEntity.entityAspect.setDeleted();\r\n                                }\r\n                            });\r\n                            break;\r\n                        case 'add':\r\n                            ev.items.forEach(function (item) {\r\n                                var entity = manager.createEntity(typeName || query.resourceName, item);\r\n                                manager.addEntity(entity);\r\n                                syncItems(item, entity, useBreezeMapping, breezeEntityMapping);\r\n                            });\r\n                            break;\r\n                    }\r\n                });\r\n                a.total = data.inlineCount;\r\n                return a;\r\n            },\r\n\r\n            /**\r\n             * Returns the data schema.\r\n             * @returns {object} Schema of the data.\r\n             */\r\n            _makeSchema: function () {\r\n                var schema = {\r\n                        total: function (data) {\r\n                            return data.total;\r\n                        }\r\n                    },\r\n                    meta,\r\n                    typeName,\r\n                    typeObj,\r\n                    model,\r\n                    proptype;\r\n\r\n                try {\r\n                    meta = this.manager.metadataStore;\r\n                    typeName = meta.getEntityTypeNameForResourceName(this.query.resourceName);\r\n                    typeObj = meta.getEntityType(typeName || this.query.resourceName);\r\n                } catch (ex) {\r\n                    return schema;\r\n                }\r\n\r\n                model = { fields: {} };\r\n                if (typeObj.keyProperties) {\r\n                    if (typeObj.keyProperties.length === 1) {\r\n                        model.id = typeObj.keyProperties[0].name;\r\n                    } else if (typeObj.keyProperties.length > 1) {\r\n                        console && console.error && console.error('Multiple-key ID not supported');\r\n                    }\r\n                }\r\n\r\n                try {\r\n                    typeObj.dataProperties.forEach(function (prop) {\r\n                        proptype = 'string';\r\n                        if (prop.dataType.isNumeric) {\r\n                            proptype = 'number';\r\n                        }\r\n                        else if (prop.dataType.isDate) {\r\n                            proptype = 'date';\r\n                        }\r\n                        else if (prop.dataType.name === 'Boolean') {\r\n                            proptype = 'boolean';\r\n                        }\r\n\r\n                        model.fields[prop.name] = {\r\n                            type: proptype,\r\n                            defaultValue: prop.defaultValue,\r\n                            nullable: prop.isNullable,\r\n                            required: prop.isNullable\r\n                        };\r\n                    });\r\n                } catch (ex) {\r\n                    return schema;\r\n                }\r\n\r\n                schema.model = model;\r\n                return schema;\r\n            }\r\n        }\r\n    );\r\n\r\n    /**\r\n     * Kendo DataSource using Breeze for accessing data.\r\n     */\r\n    exports.Source = kendo.data.DataSource.extend({\r\n        init: function (options) {\r\n            var transport = new BreezeTransport(options, kendo.data.Model);\r\n            options = $.extend(\r\n                {},\r\n                {\r\n                    transport: transport,\r\n                    schema: transport._makeSchema(),\r\n                    batch: true\r\n                },\r\n                options);\r\n            kendo.data.DataSource.prototype.init.call(this, options);\r\n        },\r\n\r\n        cancelChanges: function (e) {\r\n            var _this = this;\r\n\r\n            if (e instanceof kendo.data.Model) {\r\n                _this._cancelModel(e);\r\n                _this.transport._cancelChanges(e);\r\n            } else {\r\n                _this._destroyed = [];\r\n                _this._detachObservableParents();\r\n                _this._data = _this._observe(_this._pristineData);\r\n                _this.options.serverPaging && (_this._total = _this._pristineTotal);\r\n                _this._change();\r\n                _this.transport._cancelChanges();\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Kendo DataSource for the Scheduler widget using Breeze for accessing data.\r\n     */\r\n    exports.SchedulerSource = kendo.data.SchedulerDataSource.extend({\r\n        init: function (options) {\r\n            var transport;\r\n\r\n            options = $.extend(\r\n                {},\r\n                {\r\n                    // By default use mapping to avoid circular references in the data items,\r\n                    // since Kendo Scheduler cannot handle them.\r\n                    useBreezeMapping: true\r\n                },\r\n                options);\r\n            transport = new BreezeTransport(options, kendo.data.SchedulerEvent);\r\n\r\n            options = $.extend(\r\n                {},\r\n                {\r\n                    transport: transport,\r\n                    schema: transport._makeSchema(),\r\n                    batch: true\r\n                },\r\n                options);\r\n            kendo.data.SchedulerDataSource.prototype.init.call(this, options);\r\n        },\r\n\r\n        cancelChanges: function (e) {\r\n            var _this = this;\r\n\r\n            if (e instanceof kendo.data.SchedulerEvent) {\r\n                _this._cancelModel(e);\r\n                _this.transport._cancelChanges(e);\r\n            } else {\r\n                _this._destroyed = [];\r\n                _this._detachObservableParents();\r\n                _this._data = _this._observe(_this._pristineData);\r\n                _this.options.serverPaging && (_this._total = _this._pristineTotal);\r\n                _this._change();\r\n                _this.transport._cancelChanges();\r\n            }\r\n        },\r\n\r\n        _createNewModel: function (model) {\r\n            var newModel = kendo.data.SchedulerDataSource.prototype._createNewModel.call(this, model);\r\n\r\n            // Make sure that the model has properties properly initialized. This is a requirement\r\n            // of the Scheduler templates (Otherwise an exception will be thrown if an new empty\r\n            // event is shown in the edit dialog of the scheduler) and might also be a requirement \r\n            // of the backend (which for example expects isAllDay to be an valid boolean and not \r\n            // null)\r\n            newModel.title = '';\r\n            newModel.recurrenceId = 0;\r\n            newModel.recurs = false;\r\n            newModel.isAllDay = false;\r\n\r\n            return newModel;\r\n        }\r\n    });\r\n})(jQuery, kendo, breeze);\r\n"],"sourceRoot":"/source/"}